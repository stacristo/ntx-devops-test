AWSTemplateFormatVersion: "2010-09-09"
Description: test for cloudformation

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: ntx-devops-test-vpc

  # Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "ap-southeast-2a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ntx-devops-test-public-subnet-1

  # Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "ap-southeast-2b"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ntx-devops-test-public-subnet-2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ntx-devops-test-igw

  # IGW
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # SG
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to Node.js app
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Allow HTTP traffic from anywhere
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0  # Allow traffic to app server port 3000

  # EC2 Instance 1 (Node.js App)
  AppInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00543daa0ad4d3ea4
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      KeyName: test_instance_1
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          docker --version
          
  # EC2 Instance 2 (Node.js App)
  AppInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00543daa0ad4d3ea4
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      KeyName: test_instance_2
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y docker
          service docker start
          docker --version
          
  # Application Load Balancer (ALB)
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ntx-devops-test-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AppSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application

  # Target Group for Load Balancer
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: 3000
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref AppInstance1
        - Id: !Ref AppInstance2

  # Listener for Load Balancer
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
            MessageBody: "Hi there! I'm being served from {hostname}!"
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNSName:
    Description: "DNS name of the Load Balancer"
    Value: !GetAtt MyLoadBalancer.DNSName
